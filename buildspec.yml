version: 0.2

env:
  secrets-manager:
    TOKEN: firstSecret:tokenForSonar
    SNYK_TOKEN: synkAPIKey

phases:
  install:
    runtime-versions:
      java: latest
      nodejs: 18
    commands:
      # Tools needed across steps
      - |
        if command -v apt-get >/dev/null 2>&1; then
          apt-get update -y
          apt-get install -y jq wget
        elif command -v yum >/dev/null 2>&1; then
          yum install -y jq wget
        else
          echo "No supported package manager (apt or yum) found"; exit 1
        fi

      # Snyk CLI
      - npm install -g snyk@latest snyk-to-html@latest
      - snyk auth "$SNYK_TOKEN" || true

  build:
    commands:
      # ---------- SonarCloud ----------
      - mvn -B verify sonar:sonar -Dsonar.projectKey=javaprojectawssagi -Dsonar.organization=javaprojectawssagi -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=$TOKEN
      - sleep 5
      - |
        quality_status=$(curl -s -u $TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=javaprojectawssagi" | jq -r '.projectStatus.status')
        echo "SonarCloud analysis status is $quality_status"
        if [ "$quality_status" = "ERROR" ]; then echo "Failing due to Sonar quality gate"; exit 1; fi

      # ---------- Snyk SCA (soft gate) ----------
      - echo "Running Snyk SCA..."
      - snyk test --severity-threshold=high --fail-on=all --json > snyk.json || true
      - npx snyk-to-html -i snyk.json -o snyk.html || true
      - echo "Snyk scan completed — report saved as snyk.html"

      # ---------- OWASP ZAP DAST (headless, no Docker) ----------
      # Ensure Java is present (Ubuntu default-jdk; Amazon Linux Corretto)
      - |
        if command -v apt-get >/dev/null 2>&1; then
          apt-get install -y default-jdk
        elif command -v yum >/dev/null 2>&1; then
          yum install -y java-17-amazon-corretto-headless || yum install -y java-11-amazon-corretto-headless
        fi

      # Download and run ZAP quick scan
      - curl -L -o ZAP_2.16.0_Linux.tar.gz https://github.com/zaproxy/zaproxy/releases/download/v2.16.0/ZAP_2.16.0_Linux.tar.gz
      - tar -xzf ZAP_2.16.0_Linux.tar.gz
      - export TARGET_URL="https://example.com"
      # -cmd = headless; -quickprogress logs progress; -maxduration limits runtime (minutes)
      - ./ZAP_2.16.0/zap.sh -cmd -quickurl "$TARGET_URL" -quickprogress  -quickout zap_report.html || true
      - test -f zap_report.html || (echo "ZAP did not produce zap_report.html"; exit 1)
      - echo "ZAP scan completed — report saved as zap_report.html"

artifacts:
  files:
    - snyk.json
    - snyk.html
    - zap_report.html
    - target/**/*
  discard-paths: yes
